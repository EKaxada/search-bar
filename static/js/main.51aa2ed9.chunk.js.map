{"version":3,"sources":["trie.js","App.js","index.js"],"names":["TrieNode","letter","this","prevLetter","nextLetters","isComplete","getWord","node","wordLetters","unshift","join","Trie","findAllWords","arr","next_letter","root","insert","word","i","length","current_letter","contains","next_node","find","clue_letters","output","clue_letter","dictionary","App","useState","prefix","setPrefix","suggestion","setSuggestion","myTrie","a","words","className","type","name","id","placeholder","value","onChange","e","target","split","trie_prefix","toLowerCase","found_words","sort","b","first_word","remainder","slice","onKeyDown","keyCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51aa2ed9.chunk.js","sourcesContent":["function TrieNode(letter) {\r\n  // properties \r\n  this.letter = letter;\r\n  this.prevLetter = null;\r\n  this.nextLetters = {}; // an object for the following letters\r\n  this.isComplete = false; // check whether letter is last of word\r\n\r\n  //methods\r\n  this.getWord = getWord;\r\n\r\n  // iterates through nodes to get word prediction\r\n  function getWord() {\r\n    var node = this;\r\n    var wordLetters = [];\r\n    while (node.prevLetter) {\r\n      wordLetters.unshift(node.letter);\r\n      node = node.prevLetter; // set the previous letter as node\r\n    }\r\n    return wordLetters.join(\"\");\r\n  };\r\n}\r\n\r\nfunction Trie() {\r\n  // properties\r\n  this.root = new TrieNode(null);\r\n\r\n  // methods\r\n  this.insert = insert; // insert new word in trie\r\n  this.contains = contains; // check if word exists\r\n  this.find = find; // find words similar with previous letters\r\n\r\n  // insert new word in Trie\r\n  function insert(word) {\r\n    var node = this.root; // set first node to root node\r\n    for (let i = 0; i < word.length; i++) {\r\n      const current_letter = word[i];\r\n      if (!node.nextLetters[current_letter]) { // if letter not in next letters\r\n        node.nextLetters[current_letter] = new TrieNode(current_letter); // make it node\r\n        node.nextLetters[current_letter].prevLetter = node; // add it as a child node\r\n      }\r\n      node = node.nextLetters[current_letter]; // reset node to current letter & continue iteration\r\n\r\n      // check whether whole word is inserted\r\n      if (i === word.length - 1) {\r\n        node.isComplete = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  // check if word exists\r\n  function contains(word) {\r\n    var node = this.root; // set first node to root node\r\n    for (let i = 0; i < word.length; i++) {\r\n      const current_letter = word[i];\r\n      let next_node = node.nextLetters[current_letter];\r\n      if (next_node) { // if letter is one of next letters\r\n        node = next_node; // set it as a next node\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return node.isComplete; // definitely returns 'true'\r\n  };\r\n\r\n  // find words with similar previous letters\r\n  function find(clue_letters) {\r\n    var node = this.root; // set first node to root node\r\n    var output = [];\r\n    for (let i = 0; i < clue_letters.length; i++) {\r\n      const clue_letter = clue_letters[i];\r\n      let next_node = node.nextLetters[clue_letter];\r\n      if (next_node) { // if clue letter is one of next letters\r\n        node = next_node; // set it as next node\r\n      } else {\r\n        return output;\r\n      }\r\n    }\r\n\r\n    // use the last node to find the next possible words\r\n    findAllWords(node, output);\r\n    return output;\r\n  };\r\n\r\n  // function that finds next possible words\r\n  function findAllWords(node, arr) {\r\n    if (node.isComplete) { // check if node is end node\r\n      arr.unshift(node.getWord()); // get all words and add them to array\r\n    }\r\n\r\n    // otherwise recursively call the next nodes\r\n    for (var next_letter in node.nextLetters) {\r\n      findAllWords(node.nextLetters[next_letter], arr);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Trie;\r\n\r\n// var fs = require('fs');\r\n// var text = fs.readFileSync(\"./sample.txt\", 'utf-8');\r\n// var words = text.replace(/[.,\\/#!$%^&\\^&\\*;:{}=\\-_`~()?]/g,\"\").replace(/(\\r\\n|\\n|\\r)/gm, ' ').split(' ')\r\n\r\n// var myTrie = new Trie();\r\n// for (let i = 0; i < words.length; i++) {\r\n//     const word = words[i];\r\n//     myTrie.insert(word)\r\n//     console.log(word)\r\n// }\r\n\r\n//console.log(myTrie.find('te'))\r\n\r\n","import { useState } from \"react\";\r\nimport Trie from \"./trie.js\";\r\nimport \"./App.css\";\r\n\r\nconst dictionary = {\r\n  words: ['hello','helium','world','car','carpet','test','this','that','those','working','is']\r\n}\r\n\r\nfunction App() {\r\n  const [prefix, setPrefix] = useState(\"\");\r\n  const [suggestion, setSuggestion] = useState(\"\");\r\n\r\n  // const getWords = async() => {\r\n  //   const url = 'https://raw.githubusercontent.com/EKaxada/webster-words/main/dict.json'\r\n  //   const res = await fetch(url, {\r\n  //     method: 'GET'\r\n  //   });\r\n  //   return await res.json();\r\n  // }\r\n\r\n  var myTrie = new Trie();\r\n\r\n  (async()=>{\r\n    // const dictionary = await getWords();\r\n    const words = dictionary.words;\r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        myTrie.insert(word)\r\n    }\r\n  })();\r\n\r\n  const onChange = (e) => {\r\n    var value = e.target.value;\r\n    setPrefix(value);\r\n    var words = value.split(\" \");\r\n    var trie_prefix = words[words.length - 1].toLowerCase();\r\n    var found_words = myTrie.find(trie_prefix).sort((a, b) => {\r\n      return a.length - b.length;\r\n    });\r\n    var first_word = found_words[0];\r\n    if (\r\n      found_words.length !== 0 &&\r\n      value !== \"\" &&\r\n      value[value.length - 1] !== \" \"\r\n    ) {\r\n      if (first_word != null) {\r\n        var remainder = first_word.slice(trie_prefix.length);\r\n        setSuggestion(value + remainder);\r\n      }\r\n    } else {\r\n      setSuggestion(value);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.keyCode === 39) {\r\n      setPrefix(suggestion);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"search-bar\"\r\n        id=\"search-bar\"\r\n        placeholder=\"Search...\"\r\n        value={prefix}\r\n        onChange={onChange}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"search-bar\"\r\n        id=\"search-bar2\"\r\n        value={suggestion}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}